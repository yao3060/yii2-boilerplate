variables:
  GIT_STRATEGY: fetch
  GIT_DEPTH: 1
  KUBECONFIG: /etc/deploy/config

cache:
  key: "$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG"
  paths:
    - src/vendor
    - src/web/apidocs

stages:
  - test
  - install
  - build-apidoc
  - build
  - deploy

before_script:
  - set -aeu
  # - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  - cp .env.default .env

after_script:
  - source .env
  # - ./deploy/scripts/clean-docker-network.sh  "${PROJECT}_${ENVIRONMENT}_default"

################################################################
### Test ###
################################################################
sonarqube-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "192.168.4.135 sonarqube.818ps.com" > /etc/hosts
    - ping -c 2 sonarqube.818ps.com
    - sonar-scanner
  allow_failure: true
  only:
    - test

################################################################
### Staging ###
################################################################

staging-install-job:
  stage: install
  environment:
    name: staging
  image: composer:2
  tags:
    - 818ps_web_dev
  only:
    - develop
  script:
    - cd ./src
    - echo "Start install php packages"
    - composer install --ignore-platform-reqs --no-scripts --no-dev
    # Optimizes PSR0 and PSR4 packages to be loaded with classmaps too, good for production.
    - composer dump-autoload -o

staging-build-apidoc-job:
  stage: build-apidoc
  environment:
    name: staging
  image: yao3060/apidoc
  tags:
    - 818ps_web_dev
  only:
    - develop
  script:
    - echo "Start generate Apidoc"
    - rm -f apidoc
    - ls -la
    - apidoc -i src/controllers/ -o ./src/web/apidocs/

staging-build-job:
  stage: build
  environment:
    name: staging
  tags:
    - 818ps_web_dev
  only:
    - develop
  script:
    # - ./deploy/scripts/enable-docker-compose-network.sh
    - ./deploy/scripts/update-resource-mirror.sh
    - ./deploy/scripts/modify-dot-env-staging.sh
    - sed -i "1 s|$|-${CI_COMMIT_SHA:0:8}|" VERSION
    - source ./.env
    - export COMPOSE_PROJECT_NAME="${PROJECT}_${ENVIRONMENT}"
    - export VERSION=$(cat VERSION)
    - echo $VERSION
    - echo "ready to build and push to Aliyun CS"
    - ./deploy/scripts/deploy-to-aliyun-cs.sh nginx php
    - echo "built successfully"
  # when: manual

staging-deploy-job:
  stage: deploy
  environment:
    name: staging
  tags:
    - 818ps_web_dev
  only:
    - develop
  script:
    - mkdir -p /etc/deploy
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - ./deploy/scripts/modify-dot-env-staging.sh
    - cp k8s/overlays/staging/secrets.example.txt k8s/overlays/staging/secrets.txt
    - cp k8s/overlays/staging/secrets.txt k8s/base/apps/secrets.txt
    - cp k8s/overlays/staging/secrets.txt k8s/base/db/secrets.txt
    - sed -i "1 s|$|-${CI_COMMIT_SHA:0:8}|" VERSION
    - export FULLSHA=$(cat VERSION)
    - echo $FULLSHA
    - sed -i "s/MYNEWTAG/${FULLSHA}/g" k8s/overlays/staging/kustomization.yaml
    - sed -i "s/APP_NEW_VERSION/${FULLSHA}/g" k8s/overlays/staging/kustomization.yaml
    - cat k8s/overlays/staging/secrets.txt
    - kubectl apply -k k8s/overlays/staging/ --record
  # when: manual

################################################################
### production
################################################################

prod-install-job:
  stage: install
  environment:
    name: production
  image: composer:2
  tags:
    - 818ps_web_dev
  only:
    - master
  script:
    - cd ./src
    - echo "Start install php packages"
    - composer install --ignore-platform-reqs --no-dev --no-scripts
    - composer dump-autoload -o

prod-build-job:
  stage: build
  environment:
    name: production
  tags:
    - 818ps_web_dev
  only:
    - master
  script:
    # - ./deploy/scripts/enable-docker-compose-network.sh
    - ./deploy/scripts/update-resource-mirror.sh
    - ./deploy/scripts/modify-dot-env-production.sh
    - sed -i "1 s|$|-${CI_COMMIT_SHA:0:8}|" VERSION
    - source ./.env
    - export COMPOSE_PROJECT_NAME="${PROJECT}_${ENVIRONMENT}"
    - export VERSION=$(cat VERSION)
    - echo $VERSION
    - echo "ready to build and push to Aliyun CS"
    - ./deploy/scripts/deploy-to-aliyun-cs.sh nginx php
    - echo "built successfully"
  # when: manual

prod-deploy-job:
  stage: deploy
  environment:
    name: production
  tags:
    - 818ps_web_dev
  only:
    - master
  script:
    - mkdir -p /etc/deploy
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - kubectl cluster-info
    - ./deploy/scripts/modify-dot-env-production.sh
    - cp k8s/overlays/production/secrets.example.txt k8s/overlays/production/secrets.txt
    - cp k8s/overlays/production/secrets.txt k8s/base/apps/secrets.txt
    - cp k8s/overlays/production/secrets.txt k8s/base/db/secrets.txt
    - sed -i "1 s|$|-${CI_COMMIT_SHA:0:8}|" VERSION
    - export FULLSHA=$(cat VERSION)
    - echo $FULLSHA
    - sed -i "s/MYNEWTAG/${FULLSHA}/g" k8s/overlays/production/kustomization.yaml
    - sed -i "s/APP_NEW_VERSION/${FULLSHA}/g" k8s/overlays/production/kustomization.yaml
    - cat k8s/overlays/production/secrets.txt
    - kubectl apply -k k8s/overlays/production/
  when: manual
